import Product from "../models/Product.js";
import mongoose from "mongoose";

// ‚úÖ L·∫•y danh s√°ch s·∫£n ph·∫©m (t√¨m ki·∫øm + l·ªçc + ph√¢n trang + kho·∫£ng gi√°)
export const getProducts = async (req, res) => {
  try {
    const {
      page = 1,
      limit = 8,
      brand,
      search,
      sortBy = "createdAt",
      order = "desc",
      minPrice,
      maxPrice,
    } = req.query;

    const filter = {};

    // üîπ L·ªçc theo th∆∞∆°ng hi·ªáu (1 ho·∫∑c nhi·ªÅu)
    if (brand) {
      const brandList = brand.split(",").map((b) => b.trim());
      filter.brand = { $in: brandList };
    }

    // üîπ T√¨m ki·∫øm theo text (name, brand, model)
    if (search) {
      filter.$text = { $search: search };
    }

    // üîπ L·ªçc theo kho·∫£ng gi√°
    if (minPrice || maxPrice) {
      filter.basePrice = {};
      if (minPrice) filter.basePrice.$gte = Number(minPrice);
      if (maxPrice) filter.basePrice.$lte = Number(maxPrice);
    }

    // üîπ S·∫Øp x·∫øp
    const sortOptions = { [sortBy]: order === "asc" ? 1 : -1 };

    // üîπ Truy v·∫•n d·ªØ li·ªáu
    const products = await Product.find(filter)
      .sort(sortOptions)
      .skip((page - 1) * limit)
      .limit(Number(limit));

    const total = await Product.countDocuments(filter);

    res.json({
      data: products,
      pagination: {
        total,
        page: Number(page),
        totalPages: Math.ceil(total / limit),
      },
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", err);
    res.status(500).json({ message: "Server error" });
  }
};

// ‚úÖ L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID ho·∫∑c slug
export const getProductById = async (req, res) => {
  try {
    const { id } = req.params;

    const product = mongoose.isValidObjectId(id)
      ? await Product.findById(id)
      : await Product.findOne({ slug: id });

    if (!product) return res.status(404).json({ message: "Product not found" });
    res.json(product);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", err);
    res.status(500).json({ message: "Server error" });
  }
};

// ‚úÖ Th√™m m·ªõi s·∫£n ph·∫©m (ch·ªâ admin)
export const createProduct = async (req, res) => {
  try {
    const newProduct = await Product.create(req.body);
    res.status(201).json(newProduct);
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o s·∫£n ph·∫©m:", err);
    res.status(400).json({ message: "Invalid data", error: err.message });
  }
};

// ‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m (ch·ªâ admin)
export const updateProduct = async (req, res) => {
  try {
    const { id } = req.params;
    const updated = await Product.findByIdAndUpdate(id, req.body, { new: true });
    if (!updated) return res.status(404).json({ message: "Product not found" });
    res.json(updated);
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", err);
    res.status(400).json({ message: "Invalid update data" });
  }
};

// ‚úÖ X√≥a s·∫£n ph·∫©m (ch·ªâ admin)
export const deleteProduct = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await Product.findByIdAndDelete(id);
    if (!deleted) return res.status(404).json({ message: "Product not found" });
    res.json({ message: "Product deleted" });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m:", err);
    res.status(500).json({ message: "Server error" });
  }
};
